#include <iostream>
using namespace std;

template<class T>
dlist<T>::~dlist(){
    dnode<T> *ptr;
    while(head != NULL){
        ptr = head;
        head = head -> next();
        delete ptr;
    }
}

template<class T>
dlist<T>::dlist(const dlist<T>& other){
    if(other.head == NULL){
        head = tail = NULL;
    }
    else{
        dnode<T>* src;

        head = tail = new dnode<T>(other.head -> data());
        src = other.head -> next();

        while(src != NULL){
            tail -> set_next(new dnode<T>(src -> data(), NULL, tail));
            src = src -> next();
            tail = tail -> next();
        }
    }
}

template<class T>
dlist<T>& dlist<T>::operator = (const dlist<T> &other){
    if(this == &other){
        return *this;
    }
    dnode<T> *ptr;
    while(head != NULL){
        ptr = head;
        head = head -> next();
        delete ptr;
    }
    if(other.head == NULL){
        head = tail = NULL;
    }
    else{
        dnode<T>* src;

        head = tail = new dnode<T>(other.head -> data());
        src = other.head -> next();

        while(src != NULL){
            tail -> set_next(new dnode<T>(src -> data(), NULL, tail));
            src = src -> next();
            tail = tail -> next();
        }
    }

    return *this;
}

template<class T>
void dlist<T>::rear_insert(T item){
    if(head == NULL){
        head = tail = new dnode<T>(item);
    }
    else{ 
        tail -> set_next(new dnode<T>(item, NULL, tail));
        tail = tail -> next();
    }
}

template<class T>
void dlist<T>::front_insert(T item){
    if(head == NULL){
        head = tail = new dnode<T>(item);
    }
    else{
        head -> set_prev(new dnode<T>(item, head, NULL));
        head = head -> prev();
    }
}

template<class T>
void dlist<T>::show(){
    dnode<T> *cursor = head;
    while (cursor != NULL){
        cout << cursor -> data() << " ";
        cursor = cursor -> next();
    }
    cout << endl;
}

template<class T>
void dlist<T>::front_remove(){
    if(head == NULL){
        return;
    }
    else if(head -> next() == NULL && tail -> prev() == NULL){
        dnode<T> *ptr = head;
        delete ptr;
        head = tail = NULL;
    }
    else{
        dnode<T> *ptr = head;
        head = head -> next();
        delete ptr;
        head -> set_prev(NULL);
    }
}

template<class T>
void dlist<T>::rear_remove(){
    if(head == NULL){
        return;
    }
    else{
        dnode<T> *ptr = tail;
        tail = tail -> prev();
        delete ptr;
        tail -> set_next(NULL);
    }
}

template<class T>
void dlist<T>::reverse_show(){
    dnode<T> *cursor = tail;
    while (cursor != NULL){
        cout << cursor -> data() << " ";
        cursor = cursor -> prev();
    }
    cout << endl;
}

template<class T>
void dlist<T>::insert_before(node_iterator<T> it, T item){
    if(it.current == NULL){ // empty list
        head = tail = new dnode<T>(item);
    }
    else if(it.current -> prev() == NULL){ // first node
        it.current -> set_prev(new dnode<T>(item, it.current, NULL));
        head = head -> prev();
    }
    else{// middle
        (it.current -> prev()) -> set_next(new dnode<T>(item, it.current, it.current -> prev()));
        it.current -> set_prev(it.current -> prev() -> next());
    }
}

template<class T>
void dlist<T>::insert_after(node_iterator<T> it, T item){
    if(it.current == NULL){ // empty list
        head = tail = new dnode<T>(item);
    }
    else if ((head -> next()) == NULL || (it.current -> next()) == NULL){ // one node list or end of list
        it.current -> set_next(new dnode<T>(item, NULL, it.current));
        tail = it.current -> next();
    }
    else{
        it.current -> next() -> set_prev(new dnode<T>(item, it.current -> next(), it.current));
        it.current -> set_next(it.current -> next() -> prev());
    }
    
}

template<class T>
int dlist<T>::size(){
    int count = 0;
    dnode<T> *ptr = head;
    while(ptr != NULL){
        count ++;
        ptr = ptr -> next();
    }
    return count;
}


template<class T>
void dlist<T>::remove(node_iterator<T> it){
    if(it.current == NULL){// empty list
        return;
    }
    else if((it.current -> prev()) == NULL && (it.current -> next()) == NULL){// only one in the list
        head = tail = NULL;
        delete it.current;
    }
    else if ((it.current -> next()) == NULL){// last one in the list
        it.current -> prev() -> set_next(NULL);
        tail = tail -> prev();
        delete it.current;
    }
    else{// middle of list
        it.current -> prev() -> set_next(it.current -> next());
        it.current -> next() -> set_prev(it.current -> prev());
        delete it.current;
    }
}
